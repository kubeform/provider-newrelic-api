/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	alertv1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/alert/v1alpha1"
	apiaccessv1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/apiaccess/v1alpha1"
	applicationv1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/application/v1alpha1"
	dashboardv1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/dashboard/v1alpha1"
	entityv1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/entity/v1alpha1"
	eventsv1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/events/v1alpha1"
	infrav1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/infra/v1alpha1"
	insightsv1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/insights/v1alpha1"
	nrqlv1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/nrql/v1alpha1"
	onev1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/one/v1alpha1"
	pluginsv1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/plugins/v1alpha1"
	syntheticsv1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/synthetics/v1alpha1"
	workloadv1alpha1 "kubeform.dev/provider-newrelic-api/client/clientset/versioned/typed/workload/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	AlertV1alpha1() alertv1alpha1.AlertV1alpha1Interface
	ApiaccessV1alpha1() apiaccessv1alpha1.ApiaccessV1alpha1Interface
	ApplicationV1alpha1() applicationv1alpha1.ApplicationV1alpha1Interface
	DashboardV1alpha1() dashboardv1alpha1.DashboardV1alpha1Interface
	EntityV1alpha1() entityv1alpha1.EntityV1alpha1Interface
	EventsV1alpha1() eventsv1alpha1.EventsV1alpha1Interface
	InfraV1alpha1() infrav1alpha1.InfraV1alpha1Interface
	InsightsV1alpha1() insightsv1alpha1.InsightsV1alpha1Interface
	NrqlV1alpha1() nrqlv1alpha1.NrqlV1alpha1Interface
	OneV1alpha1() onev1alpha1.OneV1alpha1Interface
	PluginsV1alpha1() pluginsv1alpha1.PluginsV1alpha1Interface
	SyntheticsV1alpha1() syntheticsv1alpha1.SyntheticsV1alpha1Interface
	WorkloadV1alpha1() workloadv1alpha1.WorkloadV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	alertV1alpha1       *alertv1alpha1.AlertV1alpha1Client
	apiaccessV1alpha1   *apiaccessv1alpha1.ApiaccessV1alpha1Client
	applicationV1alpha1 *applicationv1alpha1.ApplicationV1alpha1Client
	dashboardV1alpha1   *dashboardv1alpha1.DashboardV1alpha1Client
	entityV1alpha1      *entityv1alpha1.EntityV1alpha1Client
	eventsV1alpha1      *eventsv1alpha1.EventsV1alpha1Client
	infraV1alpha1       *infrav1alpha1.InfraV1alpha1Client
	insightsV1alpha1    *insightsv1alpha1.InsightsV1alpha1Client
	nrqlV1alpha1        *nrqlv1alpha1.NrqlV1alpha1Client
	oneV1alpha1         *onev1alpha1.OneV1alpha1Client
	pluginsV1alpha1     *pluginsv1alpha1.PluginsV1alpha1Client
	syntheticsV1alpha1  *syntheticsv1alpha1.SyntheticsV1alpha1Client
	workloadV1alpha1    *workloadv1alpha1.WorkloadV1alpha1Client
}

// AlertV1alpha1 retrieves the AlertV1alpha1Client
func (c *Clientset) AlertV1alpha1() alertv1alpha1.AlertV1alpha1Interface {
	return c.alertV1alpha1
}

// ApiaccessV1alpha1 retrieves the ApiaccessV1alpha1Client
func (c *Clientset) ApiaccessV1alpha1() apiaccessv1alpha1.ApiaccessV1alpha1Interface {
	return c.apiaccessV1alpha1
}

// ApplicationV1alpha1 retrieves the ApplicationV1alpha1Client
func (c *Clientset) ApplicationV1alpha1() applicationv1alpha1.ApplicationV1alpha1Interface {
	return c.applicationV1alpha1
}

// DashboardV1alpha1 retrieves the DashboardV1alpha1Client
func (c *Clientset) DashboardV1alpha1() dashboardv1alpha1.DashboardV1alpha1Interface {
	return c.dashboardV1alpha1
}

// EntityV1alpha1 retrieves the EntityV1alpha1Client
func (c *Clientset) EntityV1alpha1() entityv1alpha1.EntityV1alpha1Interface {
	return c.entityV1alpha1
}

// EventsV1alpha1 retrieves the EventsV1alpha1Client
func (c *Clientset) EventsV1alpha1() eventsv1alpha1.EventsV1alpha1Interface {
	return c.eventsV1alpha1
}

// InfraV1alpha1 retrieves the InfraV1alpha1Client
func (c *Clientset) InfraV1alpha1() infrav1alpha1.InfraV1alpha1Interface {
	return c.infraV1alpha1
}

// InsightsV1alpha1 retrieves the InsightsV1alpha1Client
func (c *Clientset) InsightsV1alpha1() insightsv1alpha1.InsightsV1alpha1Interface {
	return c.insightsV1alpha1
}

// NrqlV1alpha1 retrieves the NrqlV1alpha1Client
func (c *Clientset) NrqlV1alpha1() nrqlv1alpha1.NrqlV1alpha1Interface {
	return c.nrqlV1alpha1
}

// OneV1alpha1 retrieves the OneV1alpha1Client
func (c *Clientset) OneV1alpha1() onev1alpha1.OneV1alpha1Interface {
	return c.oneV1alpha1
}

// PluginsV1alpha1 retrieves the PluginsV1alpha1Client
func (c *Clientset) PluginsV1alpha1() pluginsv1alpha1.PluginsV1alpha1Interface {
	return c.pluginsV1alpha1
}

// SyntheticsV1alpha1 retrieves the SyntheticsV1alpha1Client
func (c *Clientset) SyntheticsV1alpha1() syntheticsv1alpha1.SyntheticsV1alpha1Interface {
	return c.syntheticsV1alpha1
}

// WorkloadV1alpha1 retrieves the WorkloadV1alpha1Client
func (c *Clientset) WorkloadV1alpha1() workloadv1alpha1.WorkloadV1alpha1Interface {
	return c.workloadV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.alertV1alpha1, err = alertv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.apiaccessV1alpha1, err = apiaccessv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.applicationV1alpha1, err = applicationv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dashboardV1alpha1, err = dashboardv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.entityV1alpha1, err = entityv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.eventsV1alpha1, err = eventsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.infraV1alpha1, err = infrav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.insightsV1alpha1, err = insightsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.nrqlV1alpha1, err = nrqlv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.oneV1alpha1, err = onev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.pluginsV1alpha1, err = pluginsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.syntheticsV1alpha1, err = syntheticsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.workloadV1alpha1, err = workloadv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.alertV1alpha1 = alertv1alpha1.NewForConfigOrDie(c)
	cs.apiaccessV1alpha1 = apiaccessv1alpha1.NewForConfigOrDie(c)
	cs.applicationV1alpha1 = applicationv1alpha1.NewForConfigOrDie(c)
	cs.dashboardV1alpha1 = dashboardv1alpha1.NewForConfigOrDie(c)
	cs.entityV1alpha1 = entityv1alpha1.NewForConfigOrDie(c)
	cs.eventsV1alpha1 = eventsv1alpha1.NewForConfigOrDie(c)
	cs.infraV1alpha1 = infrav1alpha1.NewForConfigOrDie(c)
	cs.insightsV1alpha1 = insightsv1alpha1.NewForConfigOrDie(c)
	cs.nrqlV1alpha1 = nrqlv1alpha1.NewForConfigOrDie(c)
	cs.oneV1alpha1 = onev1alpha1.NewForConfigOrDie(c)
	cs.pluginsV1alpha1 = pluginsv1alpha1.NewForConfigOrDie(c)
	cs.syntheticsV1alpha1 = syntheticsv1alpha1.NewForConfigOrDie(c)
	cs.workloadV1alpha1 = workloadv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.alertV1alpha1 = alertv1alpha1.New(c)
	cs.apiaccessV1alpha1 = apiaccessv1alpha1.New(c)
	cs.applicationV1alpha1 = applicationv1alpha1.New(c)
	cs.dashboardV1alpha1 = dashboardv1alpha1.New(c)
	cs.entityV1alpha1 = entityv1alpha1.New(c)
	cs.eventsV1alpha1 = eventsv1alpha1.New(c)
	cs.infraV1alpha1 = infrav1alpha1.New(c)
	cs.insightsV1alpha1 = insightsv1alpha1.New(c)
	cs.nrqlV1alpha1 = nrqlv1alpha1.New(c)
	cs.oneV1alpha1 = onev1alpha1.New(c)
	cs.pluginsV1alpha1 = pluginsv1alpha1.New(c)
	cs.syntheticsV1alpha1 = syntheticsv1alpha1.New(c)
	cs.workloadV1alpha1 = workloadv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
