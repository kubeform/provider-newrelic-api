/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-newrelic-api/apis/entity/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TagsLister helps list Tagses.
// All objects returned here must be treated as read-only.
type TagsLister interface {
	// List lists all Tagses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Tags, err error)
	// Tagses returns an object that can list and get Tagses.
	Tagses(namespace string) TagsNamespaceLister
	TagsListerExpansion
}

// tagsLister implements the TagsLister interface.
type tagsLister struct {
	indexer cache.Indexer
}

// NewTagsLister returns a new TagsLister.
func NewTagsLister(indexer cache.Indexer) TagsLister {
	return &tagsLister{indexer: indexer}
}

// List lists all Tagses in the indexer.
func (s *tagsLister) List(selector labels.Selector) (ret []*v1alpha1.Tags, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Tags))
	})
	return ret, err
}

// Tagses returns an object that can list and get Tagses.
func (s *tagsLister) Tagses(namespace string) TagsNamespaceLister {
	return tagsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TagsNamespaceLister helps list and get Tagses.
// All objects returned here must be treated as read-only.
type TagsNamespaceLister interface {
	// List lists all Tagses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Tags, err error)
	// Get retrieves the Tags from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Tags, error)
	TagsNamespaceListerExpansion
}

// tagsNamespaceLister implements the TagsNamespaceLister
// interface.
type tagsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Tagses in the indexer for a given namespace.
func (s tagsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Tags, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Tags))
	})
	return ret, err
}

// Get retrieves the Tags from the indexer for a given namespace and name.
func (s tagsNamespaceLister) Get(name string) (*v1alpha1.Tags, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tags"), name)
	}
	return obj.(*v1alpha1.Tags), nil
}
