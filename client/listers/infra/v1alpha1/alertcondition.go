/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-newrelic-api/apis/infra/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AlertConditionLister helps list AlertConditions.
// All objects returned here must be treated as read-only.
type AlertConditionLister interface {
	// List lists all AlertConditions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlertCondition, err error)
	// AlertConditions returns an object that can list and get AlertConditions.
	AlertConditions(namespace string) AlertConditionNamespaceLister
	AlertConditionListerExpansion
}

// alertConditionLister implements the AlertConditionLister interface.
type alertConditionLister struct {
	indexer cache.Indexer
}

// NewAlertConditionLister returns a new AlertConditionLister.
func NewAlertConditionLister(indexer cache.Indexer) AlertConditionLister {
	return &alertConditionLister{indexer: indexer}
}

// List lists all AlertConditions in the indexer.
func (s *alertConditionLister) List(selector labels.Selector) (ret []*v1alpha1.AlertCondition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlertCondition))
	})
	return ret, err
}

// AlertConditions returns an object that can list and get AlertConditions.
func (s *alertConditionLister) AlertConditions(namespace string) AlertConditionNamespaceLister {
	return alertConditionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AlertConditionNamespaceLister helps list and get AlertConditions.
// All objects returned here must be treated as read-only.
type AlertConditionNamespaceLister interface {
	// List lists all AlertConditions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AlertCondition, err error)
	// Get retrieves the AlertCondition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AlertCondition, error)
	AlertConditionNamespaceListerExpansion
}

// alertConditionNamespaceLister implements the AlertConditionNamespaceLister
// interface.
type alertConditionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AlertConditions in the indexer for a given namespace.
func (s alertConditionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AlertCondition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AlertCondition))
	})
	return ret, err
}

// Get retrieves the AlertCondition from the indexer for a given namespace and name.
func (s alertConditionNamespaceLister) Get(name string) (*v1alpha1.AlertCondition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("alertcondition"), name)
	}
	return obj.(*v1alpha1.AlertCondition), nil
}
