/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-newrelic-api/apis/synthetics/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultilocationAlertConditionLister helps list MultilocationAlertConditions.
// All objects returned here must be treated as read-only.
type MultilocationAlertConditionLister interface {
	// List lists all MultilocationAlertConditions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultilocationAlertCondition, err error)
	// MultilocationAlertConditions returns an object that can list and get MultilocationAlertConditions.
	MultilocationAlertConditions(namespace string) MultilocationAlertConditionNamespaceLister
	MultilocationAlertConditionListerExpansion
}

// multilocationAlertConditionLister implements the MultilocationAlertConditionLister interface.
type multilocationAlertConditionLister struct {
	indexer cache.Indexer
}

// NewMultilocationAlertConditionLister returns a new MultilocationAlertConditionLister.
func NewMultilocationAlertConditionLister(indexer cache.Indexer) MultilocationAlertConditionLister {
	return &multilocationAlertConditionLister{indexer: indexer}
}

// List lists all MultilocationAlertConditions in the indexer.
func (s *multilocationAlertConditionLister) List(selector labels.Selector) (ret []*v1alpha1.MultilocationAlertCondition, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultilocationAlertCondition))
	})
	return ret, err
}

// MultilocationAlertConditions returns an object that can list and get MultilocationAlertConditions.
func (s *multilocationAlertConditionLister) MultilocationAlertConditions(namespace string) MultilocationAlertConditionNamespaceLister {
	return multilocationAlertConditionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultilocationAlertConditionNamespaceLister helps list and get MultilocationAlertConditions.
// All objects returned here must be treated as read-only.
type MultilocationAlertConditionNamespaceLister interface {
	// List lists all MultilocationAlertConditions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultilocationAlertCondition, err error)
	// Get retrieves the MultilocationAlertCondition from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MultilocationAlertCondition, error)
	MultilocationAlertConditionNamespaceListerExpansion
}

// multilocationAlertConditionNamespaceLister implements the MultilocationAlertConditionNamespaceLister
// interface.
type multilocationAlertConditionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultilocationAlertConditions in the indexer for a given namespace.
func (s multilocationAlertConditionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MultilocationAlertCondition, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultilocationAlertCondition))
	})
	return ret, err
}

// Get retrieves the MultilocationAlertCondition from the indexer for a given namespace and name.
func (s multilocationAlertConditionNamespaceLister) Get(name string) (*v1alpha1.MultilocationAlertCondition, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("multilocationalertcondition"), name)
	}
	return obj.(*v1alpha1.MultilocationAlertCondition), nil
}
