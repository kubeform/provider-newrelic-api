/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-newrelic-api/apis/synthetics/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MonitorScriptLister helps list MonitorScripts.
// All objects returned here must be treated as read-only.
type MonitorScriptLister interface {
	// List lists all MonitorScripts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorScript, err error)
	// MonitorScripts returns an object that can list and get MonitorScripts.
	MonitorScripts(namespace string) MonitorScriptNamespaceLister
	MonitorScriptListerExpansion
}

// monitorScriptLister implements the MonitorScriptLister interface.
type monitorScriptLister struct {
	indexer cache.Indexer
}

// NewMonitorScriptLister returns a new MonitorScriptLister.
func NewMonitorScriptLister(indexer cache.Indexer) MonitorScriptLister {
	return &monitorScriptLister{indexer: indexer}
}

// List lists all MonitorScripts in the indexer.
func (s *monitorScriptLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorScript, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorScript))
	})
	return ret, err
}

// MonitorScripts returns an object that can list and get MonitorScripts.
func (s *monitorScriptLister) MonitorScripts(namespace string) MonitorScriptNamespaceLister {
	return monitorScriptNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MonitorScriptNamespaceLister helps list and get MonitorScripts.
// All objects returned here must be treated as read-only.
type MonitorScriptNamespaceLister interface {
	// List lists all MonitorScripts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MonitorScript, err error)
	// Get retrieves the MonitorScript from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MonitorScript, error)
	MonitorScriptNamespaceListerExpansion
}

// monitorScriptNamespaceLister implements the MonitorScriptNamespaceLister
// interface.
type monitorScriptNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MonitorScripts in the indexer for a given namespace.
func (s monitorScriptNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MonitorScript, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MonitorScript))
	})
	return ret, err
}

// Get retrieves the MonitorScript from the indexer for a given namespace and name.
func (s monitorScriptNamespaceLister) Get(name string) (*v1alpha1.MonitorScript, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("monitorscript"), name)
	}
	return obj.(*v1alpha1.MonitorScript), nil
}
