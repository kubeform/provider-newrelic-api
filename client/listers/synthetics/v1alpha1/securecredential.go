/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-newrelic-api/apis/synthetics/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SecureCredentialLister helps list SecureCredentials.
// All objects returned here must be treated as read-only.
type SecureCredentialLister interface {
	// List lists all SecureCredentials in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecureCredential, err error)
	// SecureCredentials returns an object that can list and get SecureCredentials.
	SecureCredentials(namespace string) SecureCredentialNamespaceLister
	SecureCredentialListerExpansion
}

// secureCredentialLister implements the SecureCredentialLister interface.
type secureCredentialLister struct {
	indexer cache.Indexer
}

// NewSecureCredentialLister returns a new SecureCredentialLister.
func NewSecureCredentialLister(indexer cache.Indexer) SecureCredentialLister {
	return &secureCredentialLister{indexer: indexer}
}

// List lists all SecureCredentials in the indexer.
func (s *secureCredentialLister) List(selector labels.Selector) (ret []*v1alpha1.SecureCredential, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecureCredential))
	})
	return ret, err
}

// SecureCredentials returns an object that can list and get SecureCredentials.
func (s *secureCredentialLister) SecureCredentials(namespace string) SecureCredentialNamespaceLister {
	return secureCredentialNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SecureCredentialNamespaceLister helps list and get SecureCredentials.
// All objects returned here must be treated as read-only.
type SecureCredentialNamespaceLister interface {
	// List lists all SecureCredentials in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SecureCredential, err error)
	// Get retrieves the SecureCredential from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SecureCredential, error)
	SecureCredentialNamespaceListerExpansion
}

// secureCredentialNamespaceLister implements the SecureCredentialNamespaceLister
// interface.
type secureCredentialNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SecureCredentials in the indexer for a given namespace.
func (s secureCredentialNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SecureCredential, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SecureCredential))
	})
	return ret, err
}

// Get retrieves the SecureCredential from the indexer for a given namespace and name.
func (s secureCredentialNamespaceLister) Get(name string) (*v1alpha1.SecureCredential, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("securecredential"), name)
	}
	return obj.(*v1alpha1.SecureCredential), nil
}
