/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-newrelic-api/apis/alert/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MutingRuleLister helps list MutingRules.
// All objects returned here must be treated as read-only.
type MutingRuleLister interface {
	// List lists all MutingRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MutingRule, err error)
	// MutingRules returns an object that can list and get MutingRules.
	MutingRules(namespace string) MutingRuleNamespaceLister
	MutingRuleListerExpansion
}

// mutingRuleLister implements the MutingRuleLister interface.
type mutingRuleLister struct {
	indexer cache.Indexer
}

// NewMutingRuleLister returns a new MutingRuleLister.
func NewMutingRuleLister(indexer cache.Indexer) MutingRuleLister {
	return &mutingRuleLister{indexer: indexer}
}

// List lists all MutingRules in the indexer.
func (s *mutingRuleLister) List(selector labels.Selector) (ret []*v1alpha1.MutingRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MutingRule))
	})
	return ret, err
}

// MutingRules returns an object that can list and get MutingRules.
func (s *mutingRuleLister) MutingRules(namespace string) MutingRuleNamespaceLister {
	return mutingRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MutingRuleNamespaceLister helps list and get MutingRules.
// All objects returned here must be treated as read-only.
type MutingRuleNamespaceLister interface {
	// List lists all MutingRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MutingRule, err error)
	// Get retrieves the MutingRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MutingRule, error)
	MutingRuleNamespaceListerExpansion
}

// mutingRuleNamespaceLister implements the MutingRuleNamespaceLister
// interface.
type mutingRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MutingRules in the indexer for a given namespace.
func (s mutingRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MutingRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MutingRule))
	})
	return ret, err
}

// Get retrieves the MutingRule from the indexer for a given namespace and name.
func (s mutingRuleNamespaceLister) Get(name string) (*v1alpha1.MutingRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mutingrule"), name)
	}
	return obj.(*v1alpha1.MutingRule), nil
}
