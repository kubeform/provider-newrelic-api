/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-newrelic-api/apis/one/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DashboardRawLister helps list DashboardRaws.
// All objects returned here must be treated as read-only.
type DashboardRawLister interface {
	// List lists all DashboardRaws in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DashboardRaw, err error)
	// DashboardRaws returns an object that can list and get DashboardRaws.
	DashboardRaws(namespace string) DashboardRawNamespaceLister
	DashboardRawListerExpansion
}

// dashboardRawLister implements the DashboardRawLister interface.
type dashboardRawLister struct {
	indexer cache.Indexer
}

// NewDashboardRawLister returns a new DashboardRawLister.
func NewDashboardRawLister(indexer cache.Indexer) DashboardRawLister {
	return &dashboardRawLister{indexer: indexer}
}

// List lists all DashboardRaws in the indexer.
func (s *dashboardRawLister) List(selector labels.Selector) (ret []*v1alpha1.DashboardRaw, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DashboardRaw))
	})
	return ret, err
}

// DashboardRaws returns an object that can list and get DashboardRaws.
func (s *dashboardRawLister) DashboardRaws(namespace string) DashboardRawNamespaceLister {
	return dashboardRawNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DashboardRawNamespaceLister helps list and get DashboardRaws.
// All objects returned here must be treated as read-only.
type DashboardRawNamespaceLister interface {
	// List lists all DashboardRaws in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DashboardRaw, err error)
	// Get retrieves the DashboardRaw from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DashboardRaw, error)
	DashboardRawNamespaceListerExpansion
}

// dashboardRawNamespaceLister implements the DashboardRawNamespaceLister
// interface.
type dashboardRawNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DashboardRaws in the indexer for a given namespace.
func (s dashboardRawNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DashboardRaw, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DashboardRaw))
	})
	return ret, err
}

// Get retrieves the DashboardRaw from the indexer for a given namespace and name.
func (s dashboardRawNamespaceLister) Get(name string) (*v1alpha1.DashboardRaw, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dashboardraw"), name)
	}
	return obj.(*v1alpha1.DashboardRaw), nil
}
