/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-newrelic-api/apis/events/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ToMetricsRuleLister helps list ToMetricsRules.
// All objects returned here must be treated as read-only.
type ToMetricsRuleLister interface {
	// List lists all ToMetricsRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ToMetricsRule, err error)
	// ToMetricsRules returns an object that can list and get ToMetricsRules.
	ToMetricsRules(namespace string) ToMetricsRuleNamespaceLister
	ToMetricsRuleListerExpansion
}

// toMetricsRuleLister implements the ToMetricsRuleLister interface.
type toMetricsRuleLister struct {
	indexer cache.Indexer
}

// NewToMetricsRuleLister returns a new ToMetricsRuleLister.
func NewToMetricsRuleLister(indexer cache.Indexer) ToMetricsRuleLister {
	return &toMetricsRuleLister{indexer: indexer}
}

// List lists all ToMetricsRules in the indexer.
func (s *toMetricsRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ToMetricsRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ToMetricsRule))
	})
	return ret, err
}

// ToMetricsRules returns an object that can list and get ToMetricsRules.
func (s *toMetricsRuleLister) ToMetricsRules(namespace string) ToMetricsRuleNamespaceLister {
	return toMetricsRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ToMetricsRuleNamespaceLister helps list and get ToMetricsRules.
// All objects returned here must be treated as read-only.
type ToMetricsRuleNamespaceLister interface {
	// List lists all ToMetricsRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ToMetricsRule, err error)
	// Get retrieves the ToMetricsRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ToMetricsRule, error)
	ToMetricsRuleNamespaceListerExpansion
}

// toMetricsRuleNamespaceLister implements the ToMetricsRuleNamespaceLister
// interface.
type toMetricsRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ToMetricsRules in the indexer for a given namespace.
func (s toMetricsRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ToMetricsRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ToMetricsRule))
	})
	return ret, err
}

// Get retrieves the ToMetricsRule from the indexer for a given namespace and name.
func (s toMetricsRuleNamespaceLister) Get(name string) (*v1alpha1.ToMetricsRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tometricsrule"), name)
	}
	return obj.(*v1alpha1.ToMetricsRule), nil
}
